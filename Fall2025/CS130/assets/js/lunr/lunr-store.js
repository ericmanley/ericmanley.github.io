var store = [{
        "title": "Lecture: Computer Organization",
        "excerpt":"# Computer Organization #### and Assembly Language Programming  ---  CS 130 // 2025-08-25    # Welcome! Instructor: Eric Manley  ---     **Office:** Collier-Scripps 327 **Email:**  **Phone:** (515) 271-2177     **Office Hours:** Schedule in [Calendly](https://calendly.com/eric-manley/) the day before or drop inMW 9:45-11:30am (tentative)         # Course Overview     ## Overarching Theme - Learning how a high-level program is actually executed on your computer's processor    So... what is a processor?     ![Photo of the inside of a laptop](/Fall2025/CS130/assets/images/COD/inside-laptop.png)    ![Components of a processor](/Fall2025/CS130/assets/images/COD/processor-components.png)    ![Processor component diagram](/Fall2025/CS130/assets/images/COD/control.png)    ![Compiler-Assembler Diagram](/Fall2025/CS130/assets/images/COD/compiler-assembler.png)     ## Major Aspects of the Course 1. Assembly language programming 2.   Digital logic 3.   Processor architecture 4.  The C Programming Language     #### Why should I learn this stuff?  Let's start with three good reasons    #### Reason 1: Sometimes you really need to understand the system to solve your problems  There are issues related to performance and security that must be solved at *lower-levels of abstraction*     #### Example: Shazam - the transaction processing company  ![Transaction processing network](/Fall2025/CS130/assets/images/transaction-processing-network.png) - They hire developers in Des Moines - Need to process transactions fast  - If the Java garbage collector kicks in, they're in trouble     #### Reason 2: In the age of AI, being good at programming isn't good enough   [https://livebench.ai/](https://livebench.ai/)     Developers who will set themselves apart understand technological foundations, can design at higher levels, and can evaluated and refine what AI produces    #### Reason 3: How does magic *really* work in our world?        ![Door to Moria](/Fall2025/CS130/assets/images/moria-door.webp)   ![Mistborn novel cover](/Fall2025/CS130/assets/images/mistborn-book.jpg)      ![Dungeons and Dragons spells](/Fall2025/CS130/assets/images/phb-spells.jpg)             ### My background with this course  - 1996-2004: C/C++ was my _native_ language -   2001: I took a course in _assembly_ and _digital circuits_     - didn't understand how it related to actual computers -   2003: Took an awful course on computer architecture     - deathly afraid of systems courses -   2005: ðŸ˜± assigned to teach _computer organization and assembly language programming_ in grad school     - ended up teaching it 8 semesters in a row    - 2007: ðŸ˜± took a qualifying exam on computer architecture     - read the entire textbook _and_ the sequel -   2009: got Ph.D.      - this stuff was an important part of my research     ![optical scalar multiplication](/Fall2025/CS130/assets/images/optical-scalar-mult.png) -   2022-2025: Teaching this course after 13 year break    # Course Logistics     ## I'm probably going to be cancelling class for one day very soon  * My wife and I are expecting a baby due very soon ðŸ˜ƒ * Nobody knows exactly *when*  * I will **try my best** to send out an announcement about any cancellations, so watch your email      - worst case scenario: if I don't show up after about 10 minutes, you can assume that's what's going on     ## Course Website   [https://ericmanley.github.io/Fall2025/CS130](https://ericmanley.github.io/Fall2025/CS130/)     #### What to do before coming to the next class    1. Read the [syllabus](https://ericmanley.github.io/Fall2025/CS130/syllabus) 2. From the [resources](https://ericmanley.github.io/Fall2025/CS130/resources) page  - If you don't have a JAVA SDK installed, install a Java SDK     - CS67 students - you can probably use the same one for both classes  - Download and run MARS - the MIPS simulator we'll be using     ## Warm up exercises  Get in groups discuss and write down your ideas  1. Rewrite the following code with one arithmetic operator (+, -, etc.) per line. You can add new variables if you need to. ```python pay = (salary + bonus) - (health_premium + taxes) ```  2. Rewrite lines of this form ```python a = b + c ``` like this ``` add a, b, c ```    ## Discussion Questions  1. What is the difference between computer _memory_ and the computer _disk_? 2. When using Excel spreadsheets, what causes something to be in memory? What causes something to be on the disk? 3. When writing a Python program, what causes something to be in memory? What causes something to be on the disk?    ","categories": [],
        "tags": [],
        "url": "/Fall2025/CS130/slides/2025-08-25-introduction-to-computer-organization/",
        "teaser": null
      },{
        "title": "Mips Assembly Language copy",
        "excerpt":"## Introduction to # MIPS ---   CS 130 // 2025-08-27    # Course Themes     ## Overarching Theme - Learning how a high-level program is actually executed on your computer's processor    ![Compiler-Assembler Diagram](/Fall2025/CS130/assets/images/COD/compiler-assembler.png)    ## Trajectory of the Course 1. **Assembly language programming** 2. Digital logic 3. Processor architecture 4. The C Programming Language    # Assembly Languages     ## Assembly Languages - Every CPU architecture implements an **instruction set** which are the operations it natively supports -   The most common CPU architectures are:     + x86 (Intel/AMD)     +   ARM (Mobile phones, tablets, Apple's M1 chip, ...)  -   Instructions are extremely simple like ``` add a, b, c ```    ## Revisiting the Exercise from last time  A complicated line of high-level code like this ```python pay = (salary + bonus) - (health_premium + taxes) ```  Gets translated by the *compiler* into assembly code like ```bash add basepay, salary, bonus add deductions, health_premium, taxes sub pay, basepay, deductions ```      ## RISC vs. CISC - CPU architectures are usually categorized as either \"RISC\" or \"CISC\" -   RISC (Reduced Instruction Set Computing)     + Simplified instructions which \"do less\"     + ...but each instruction is highly optimized    ## RISC vs. CISC - CISC (Complicated Instruction Set Computing)     + Larger instruction set each of which \"does more\"     + Optimized so that a program can be implemented with few instructions---even though those instructions may take longer to execute    # MIPS     ## MIPS Architecture - In this course, we will be learning the MIPS instruction set     + \"Microprocessor without Interlocked Pipelined Stages\" - MIPS is a RISC processor with a minimalistic number of instructions - Is very similar to ARM     ## Discussion Question    - what exactly are `salary` or `taxes`  in this example?    ```python pay = (salary + bonus) - (health_premium + taxes) ```     ## Pointers  - In assembly programs, labels like `salary` or `taxes` are *pointers*  -   **pointer**: a stand-in for a _memory address_  -   Even this is too complicated for RISC ```bash add basepay, salary, bonus ```  -   You might first have to grab the data at the address indicated by the pointer _before_ you can do any operations on it.    ## Grabbing data from memory  - When we grab data from memory, where do we put it?  -   **Registers**: a holding place for data right inside the CPU   - data has to be in a register before you can perform operations    ![Processor component diagram](/Fall2025/CS130/assets/images/COD/control.png)    ## MIPS Architecture - Has 32 registers, each of which are 32-bits -   Why not include more registers?     +   Cost; registers are more expensive than RAM     +   Performance; more registers means slower clock     +   Instruction size; more registers means each instruction needs more bits to identify registers     #### A MIPS program in MARS  ![Processor component diagram](/Fall2025/CS130/assets/images/first_program.png)     #### Things to notice in MARS  - Registers have names like `$t0`, `$s2`, etc. - You can refer to a register by its name or number.    - `$t0` is also `$8` - MARS can be wonky   - MARS didn't play nice with OneDrive for me - you may need to create a folder for your `.asm` files in your home directory - `lw` means _load word_   - a **word** is a 32 bit value  ```mips #loads a value from memory location a into register $t0 lw $t0, a   ```        #### Exploration Exercise  1. Write the above program in MARS 2. What values are stored in each of the registers initially? 3. Find and press the **Assemble** button 4. What memory addresses did your *program* get stored in? 5. What memory addresses did your *data* get stored in? 6. Find and press the **Run** button 7. What values ended up in `$t0`, `$t1`, and `$t2`? Is that what you expected?    8. Change `a`'s initial value to 9 and rerun. What is in `$t2` now? What do you think is going on here? 9. Add the following to your data section ```mips result: 0 ``` 10. Add the following to the end of your text section ```mips sw $t2, result ``` 11. Rerun. Look in memory - is there a new value there? 12. What do you think `sw` means? 13. Try the **Run one step at a time** button and step through the program slowly. Watch the values change in the registers.     ## MIPS Register Conventions             Name Reg # Usage     $zero 0 Constant 0     $v0,...2-3 Values     $a0,...4-7 Arguments     $t0,...8-15 Temporaries     $s0,...16-23 Saved (variables)     $t8,...24-25 More temporaries     $gp28 global pointer     $sp29 stack pointer     $fp30 frame pointer     $ra31 return address             Register 1 is reserved for the assembler      Registers 26-27 are reserved for the OS      Only 8 $s registers (0..7)      Only 10 $t registers (0..9)        ## Exercise  - Write a MIPS program that does the equivalent of this high-level line of code ```python pay = (salary + bonus) - (health_premium + taxes) ```    ## Immediate values  - A literal value like 3 in the example below is called an **immediate value** - `li` means _load immedate_  ```mips .data  x: 5  .text  lw $t0, x li $t1, 3 #load 3 directly into $t1 add $t0, $t1, $t0 ```    ## I-type instructions  - There's also a variation of `add` where the second operand is replaced with an immediate value - `addi` means *add immediate*    - it's an **I-type instruction**  ```mips .data  x: 5  .text  lw $t0, x addi $t0, $t0, 3 ```     ## R-Type instructions  - The add instruction that uses only registers is an **R-type instruction**  ```mips add $t0, $t1, $t0 ```     ## System Calls  - We can make **system calls** to have the system perform things like input and output - Put the system call code in `$v0` - Put argument in `$a0` (and maybe `$a1` if needed)    #### Output Exercise  - Run this in MARS and discuss what happens with your neighbors - What do you think `.asciiz` does?  ```mips .data  message: .asciiz \"Hello!\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, message #the argument for the syscall syscall ```    #### Input Exercise  - Run this in MARS and discuss what happens with your neighbors - Which register does the user's input go into?  ```mips .data  prompt: .asciiz \"Enter an integer:\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, prompt #the argument for the syscall syscall  li $v0, 5 #5 is the code for reading an integer syscall ```   #### Interactive Program Exercise  - [Assignment 1](../../assignments/assignment-1/): Write a program that interacts with the user and performs some kind of computation based on their input - Find other syscall codes on page B-44 of the textbook  ","categories": [],
        "tags": [],
        "url": "/Fall2025/CS130/slides/2025-08-27-mips-assembly-language%20copy/",
        "teaser": null
      },{
        "title": "Registers Instructions Syscalls",
        "excerpt":"# MIPS Registers, Instructions, and System Calls ---   CS 130 // 2025-09-03    #### The MIPS program we wrote last time  ![first MIPS program](/Fall2025/CS130/assets/images/first_program.png)     ## Review Discussion  * What is the difference between `.data` and `.text`? * What are `a` and `b`?  * What are `$t0`, `$t1`, and `$t2`?  * What does `lw` stand for and what does that mean?  * What does this program do when we run it?    ## MIPS Registers - Has 32 registers, each of which are 32-bits - Data must be in registers before you can do operations on them - You can **load** data from memory into a register with certain commands - You can take data in a register and **store** it in memory with certain commands    ### Exploration Exercise  ```mips # This is my first MIPS program  .data  a: 2 b: 3  .text   lw $t0, a lw $t1, b add $t2, $t0, $t1 ```  * We calculated `a+b` and the result is in register `$t2`.  * Try seeing if you can **store** this result to an actual variable in *memory*.    #### MARS Demo  * We need to be able to do the following in MARS - take notes if needed!   - Find the value stored in any given register   - Find where the values are stored in *memory*   - Find the *address* in memory where an instruction is stored   - Find the *address* in memory where variables are stored   What is a memory *address* again?     ## MIPS Register Conventions             Name Reg # Usage     $zero 0 Constant 0     $v0,...2-3 Values     $a0,...4-7 Arguments     $t0,...8-15 Temporaries     $s0,...16-23 Saved (variables)     $t8,...24-25 More temporaries     $gp28 global pointer     $sp29 stack pointer     $fp30 frame pointer     $ra31 return address             Register 1 is reserved for the assembler      Registers 26-27 are reserved for the OS      Only 8 $s registers (0..7)      Only 10 $t registers (0..9)        ## Exercise  - Write a MIPS program that does the equivalent of this high-level line of code ```python pay = (salary + bonus) - (health_premium + taxes) ```    ## Immediate values  - A literal value like 3 in the example below is called an **immediate value** - `li` means _load immedate_  ```mips .data  x: 5  .text  lw $t0, x li $t1, 3 #load 3 directly into $t1 add $t0, $t1, $t0 ```    ## I-type instructions  - There's also a variation of `add` where the second operand is replaced with an immediate value - `addi` means *add immediate*    - it's an **I-type instruction**  ```mips .data  x: 5  .text  lw $t0, x addi $t0, $t0, 3 ```     ## R-Type instructions  - The add instruction that uses only registers is an **R-type instruction**  ```mips add $t0, $t1, $t0 ```     ## System Calls  - We can make **system calls** to have the system perform things like input and output - Put the system call code in `$v0` - Put argument in `$a0` (and maybe `$a1` if needed)    #### Output Exercise  - Run this in MARS and discuss what happens with your neighbors - What do you think `.asciiz` does?  ```mips .data  message: .asciiz \"Hello!\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, message #the argument for the syscall syscall ```    #### Input Exercise  - Run this in MARS and discuss what happens with your neighbors - Which register does the user's input go into?  ```mips .data  prompt: .asciiz \"Enter an integer:\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, prompt #the argument for the syscall syscall  li $v0, 5 #5 is the code for reading an integer syscall ```   #### Interactive Program Exercise  - [Assignment 1](../../assignments/assignment-1/): Write a program that interacts with the user and performs some kind of computation based on their input - Find other syscall codes on page B-44 of the textbook  ","categories": [],
        "tags": [],
        "url": "/Fall2025/CS130/slides/2025-09-03-registers-instructions-syscalls/",
        "teaser": null
      },{
        "title": "Binary Branching",
        "excerpt":"# Binary Numbers and Branching  ---   CS 130 // 2025-09-08    # Announcements      ## Tutoring Lab is Open   - Cowles Library 201  - Sundays - Wednesdays 6-9pm  - Please be understanding if they're not always able to help with CS 130       # Review     #### Assignment 1 due today  - [Assignment 1](../../assignments/assignment-1/): Write a program that interacts with the user and performs some kind of computation based on their input - Find other syscall codes in Figure B.9.1 of the textbook    ## System Calls  - We can make **system calls** to have the system perform things like input and output - Put the system call code in `$v0` - Put argument in `$a0` (and maybe `$a1` if needed)    #### Output a string  - a 4 in `$v0` means *print a string*  - **address** of the string should be in `$a0` - `la` means *load address*    - contrast with `lw` - use when you want the data *at the address* not the address itself, so use `lw` if you want to print an int  ```mips .data  message: .asciiz \"Hello!\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, message #the argument for the syscall syscall ```    #### User Input  - a 5 in `$v0` means *read an integer*  - whatever the user types gets put into `$v0` during the syscall  ```mips .data  prompt: .asciiz \"Enter an integer:\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, prompt #the argument for the syscall syscall  li $v0, 5 #5 is the code for reading an integer syscall ```     # Logical Operations     ## Boolean values - Suppose I create a `bool` variable in Python:     ```py     b = True     ``` -   How many bits of memory were just allocated?     +   An entire word!     +   `b` is a **memory address** that \"points to\" `True`    ## Logical operator investigation     Before executing: guess what you think `$t0`-`$t5` will be   Execute it: were you right?  Is this how `and` and `or` behave in Python?    ```mips    .text     li $s0, 0    li $s1, 1    li $s2, 2    li $s3, 3        and $t0, $s0, $s1    or $t1, $s0, $s1    andi $t2, $s1, 1    ori $t3, $s1, 0        or $t4, $s1, $s2    and $t5, $s2, $s3 ```       # Binary Numbers     # CS Jokes  ![Only 10 types of people shirt](/Fall2025/CS130/assets/images/shirt10typesOfPeople.jpg)   Source: https://www.amazon.com/Types-People-understand-Binary-T-Shirt/dp/B07PSPLSC9    ## Let's talk about how counting works  ![Odometer rollover](/Fall2025/CS130/assets/images/Odometer_rollover.jpg)     How do you count if you only have two digits?     ## Counting in Binary - CPUs compute in **binary** using the contrast of low/high voltages to mean 0 and 1 - the two _binary digits_ or **bits** - So how do we encode **numbers** in binary?     ## Base 10 (AKA Decimal)  - When we write 437 we usually mean base 10 - the number system with 10 digits  - Can also write it as $437_\\text{ten}$   - $437_\\text{ten}$ means   `$$(4\\cdot 100)+(3\\cdot 10)+(7\\cdot 1)$$`  or  `$$(4\\cdot 10^2)+(3\\cdot 10^1)+(7\\cdot 10^0)$$`    ## Base 2 (AKA Binary)   $1101_\\text{two}$ means   `$$(1\\cdot 8)+(1\\cdot 4)+(0\\cdot 2)+(1\\cdot 1)$$`  or  `$$(1\\cdot 2^3)+(1\\cdot 2^2)+(0\\cdot 2^1)+(1\\cdot 2^0)$$`     ### Demo: Let's convert numbers to different bases   - $110110101_\\text{two}$  - $437_\\text{ten}$    ### Exercise: Practice with Binary - Convert the following number into decimal:     + $1011010_\\text{two}$ - Convert the following decimal number into binary:     + $277_\\text{ten}$      ### Base 16 (AKA Hexadecimal)  - Hexadecimal is base 16 - digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F - 5C means  `$$(5\\cdot 16)+(12\\cdot 1)$$`  - Easy to convert back and forth from binary    ### Counting in Binary/Hexadecimal              Decimal BinaryHex      0 0000 0      1 0001 1       2 00102      3 0011 3      4 01004      5 01015      6 01106      7 01117      8 1000 8                  Decimal BinaryHex      9 1001 9      10 1010A      11 1011 B      12 1100C      13 1101D      14 1110E      15 1111F      16 0001 000010      17 0001 000111            ### Exercise: Exploring in Mars    - Open up Mars and create a `.asm` file  - Put the number 302 in your data section - How does Mars display that in Hex? - What is the Binary equivalent?    ### Exercise: Convert back and forth    - Convert the following binary number into hex   - $\\text{1111 1010 0001 1011 0100 1110 0010 0011}_\\text{two}$ - Convert the following hexadecimal number into binary   - $\\text{00FF33AA}_\\text{hex}$       # Conditionals      ## Branching - **Branching** allows MIPS programs to skip around to different parts of the program - Useful for     - conditional statements (if, if-else, etc.)     - loops    - continue executing at the line labeled `my_label` ```mips b my_label #... my_label: ``` -   continue executing at the line labeled `my_label` if `$s0` and `$s1` are equal ```mips beq $s0, $s1, my_label ``` -   continue executing at the line labeled `my_label` if `$s0` and `$s1` are _not_ equal ```mips bne $s0, $s1, my_label ```     ## Compiling an `if` Statement         ```python     if i == j:         k = 1      print(\"The value of k is\",k) ```     ```mips .data  i: 5 j: 8 k: 0 message: .asciiz \"The value of k is \"  .text  \tlw $s0, i \tlw $s1, j \t \tbne $s0, $s1, disp_msg \tli $s2, 1 \tsw $s2, k  disp_msg: \tli $v0, 4 #4 is the code for printing a string \tla $a0, message #the argument for the syscall \tsyscall  \t \tli $v0, 1 #1 is the code for printing an int \tlw $a0, k #the argument for the syscall \tsyscall  ```          ## Exercise  - Run the above program in Mars, observe the output - Change it so `i` and `j` are equal, run again - Translate the following Python program into MIPS ```python     if i == j:         k = 1     else:         k = 2      print(\"The value of k is\",k) ```   ","categories": [],
        "tags": [],
        "url": "/Fall2025/CS130/slides/2025-09-08-binary-branching/",
        "teaser": null
      },{
        "title": "Branching",
        "excerpt":"# Branching  ---   CS 130 // 2025-09-10      # Hexadecimal         ### Base 16 (AKA Hexadecimal)  - Hexadecimal is base 16 - digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F - 5C means  `$$(5\\cdot 16)+(12\\cdot 1)$$`  - Easy to convert back and forth from binary - Used as *shorthand* for binary    ### Counting in Binary/Hexadecimal              Decimal BinaryHex      0 0000 0      1 0001 1       2 00102      3 0011 3      4 01004      5 01015      6 01106      7 01117      8 1000 8                  Decimal BinaryHex      9 1001 9      10 1010A      11 1011 B      12 1100C      13 1101D      14 1110E      15 1111F      16 0001 000010      17 0001 000111            ### Exercise: Exploring in Mars    - Open up Mars and create a `.asm` file  - Put the number 302 in your data section - How does Mars display that in Hex? - What is the Binary equivalent?    ### Exercise: Convert back and forth    - Convert the following binary number into hex   - $\\text{1111 1010 0001 1011 0100 1110 0010 0011}_\\text{two}$ - Convert the following hexadecimal number into binary   - $\\text{00FF33AA}_\\text{hex}$       # Conditionals      ## Branching - **Branching** allows MIPS programs to skip around to different parts of the program - Useful for     - conditional statements (if, if-else, etc.)     - loops    - continue executing at the line labeled `my_label` ```mips b my_label #... my_label: ``` -   continue executing at the line labeled `my_label` if `$s0` and `$s1` are equal ```mips beq $s0, $s1, my_label ``` -   continue executing at the line labeled `my_label` if `$s0` and `$s1` are _not_ equal ```mips bne $s0, $s1, my_label ```     ## Compiling an `if` Statement         ```python     if i == j:         k = 1      print(\"The value of k is\",k) ```     ```mips .data  i: 5 j: 8 k: 0 message: .asciiz \"The value of k is \"  .text  \tlw $s0, i \tlw $s1, j \t \tbne $s0, $s1, disp_msg \tli $s2, 1 \tsw $s2, k  disp_msg: \tli $v0, 4 #4 is the code for printing a string \tla $a0, message #the argument for the syscall \tsyscall  \t \tli $v0, 1 #1 is the code for printing an int \tlw $a0, k #the argument for the syscall \tsyscall  ```          ## Exercise  - Run the above program in Mars, observe the output - Change it so `i` and `j` are equal, run again - Translate the following Python program into MIPS ```python     if i == j:         k = 1     else:         k = 2      print(\"The value of k is\",k) ```     ## Set on Less Than investigation     Before executing: guess what you think `$t0`-`$t6` will be  Execute it: were you right?  What do `sle` and `sgt` mean? What do they get translated into by the assemler?    ```mips .text   li $s1, 2 li $s2, 2 li $s3, 3  #slt: \"set on less than\" slt $t0, $s2, $s3 slt $t1, $s1, $s2 slt $t2, $s3, $s2 slti $t3, $s3, 10  #psuedoinstructions sle $t4, $s1, $s3 sle $t5, $s1, $s2 sgt $t6, $s3, $s2 ```       ## Exercise  - Translate the following Python program into MIPS - This is the same as your previous exercise, except with `i     ## Assignment  - [Assignment 2](../../assignments/assignment-2/)   - Translate a Python program that has both an if statement and a loop ","categories": [],
        "tags": [],
        "url": "/Fall2025/CS130/slides/2025-09-10-branching/",
        "teaser": null
      }]
