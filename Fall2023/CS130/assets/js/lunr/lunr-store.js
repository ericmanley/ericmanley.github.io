var store = [{
        "title": "Lecture: Computer Organization",
        "excerpt":"# Computer Organization #### and Assembly Language Programming  ---  CS 130 // 2023-08-29    # Welcome! Instructor: Eric Manley  ---     **Office:** Collier-Scripps 327 **Email:**  **Phone:** (515) 271-2177     **Office Hours:** Schedule in StarFish the day before or drop inM 10:00am-1:00pmT 10:00am-12:00pmNo office hours 9/18 (tentative)         # Course Overview     ## Overarching Theme - Learning how a high-level program is actually executed on your computer's processor    So... what is a processor?     ![Photo of the inside of a laptop](/Fall2023/CS130/assets/images/COD/inside-laptop.png)    ![Components of a processor](/Fall2023/CS130/assets/images/COD/processor-components.png)    ![Processor component diagram](/Fall2023/CS130/assets/images/COD/control.png)    ![Compiler-Assembler Diagram](/Fall2023/CS130/assets/images/COD/compiler-assembler.png)     ## Major Aspects of the Course 1. Assembly language programming 2.   Digital logic 3.   Processor architecture 4.  The C Programming Language     #### Why should I learn this stuff?    Sometimes you really need to understand the system to solve your problems  ![Shazam movie poster](/Fall2023/CS130/assets/images/shazam-movie.jpg)    Wait, that's the wrong Shazam      #### Shazam - the transaction processing company  ![Transaction processing network](/Fall2023/CS130/assets/images/transaction-processing-network.png) - They hire developers in Des Moines - Need to process transactions fast  - If the Java garbage collector kicks in, they're in trouble    #### How does magic *really* work in our world?        ![Door to Moria](/Fall2023/CS130/assets/images/moria-door.webp)   ![Mistborn novel cover](/Fall2023/CS130/assets/images/mistborn-book.jpg)      ![Dungeons and Dragons spells](/Fall2023/CS130/assets/images/phb-spells.jpg)             ### My background with this course  - 1996-2004: C/C++ was my _native_ language -   2001: I took a course in _assembly_ and _digital circuits_     - didn't understand how it related to actual computers -   2003: Took an awful course on computer architecture     - deathly afraid of systems courses -   2005: ðŸ˜± assigned to teach _computer organization and assembly language programming_ in grad school     - ended up teaching it 8 semesters in a row    - 2007: ðŸ˜± took a qualifying exam on computer architecture     - read the entire textbook _and_ the sequel -   2009: got Ph.D.      - this stuff was an important part of my research     ![optical scalar multiplication](/Fall2023/CS130/assets/images/optical-scalar-mult.png) -   2022-2023: Teaching this course after 13 year break    # Course Logistics     ## Course Website   [https://ericmanley.github.io/Fall2023/CS130](https://ericmanley.github.io/Fall2023/CS130/)     #### What to do before coming to the next class    1. Read the [syllabus](https://ericmanley.github.io/Fall2023/CS130/syllabus) 2. From the [resources](https://ericmanley.github.io/Fall2023/CS130/resources) page  - If you don't have a JAVA SDK installed, install a Java SDK     - CS67 students - try the one your instructor wants first  - Download and run MARS - the MIPS simulator we'll be using     ## Warm up exercises  Get in groups discuss and write down your ideas  1. Rewrite the following code with one arithmetic operator (+, -, etc.) per line ```python pay = (salary + bonus) - (health_premium + taxes) ```  2. Rewrite lines of this form ```python a = b + c ``` like this ``` add a, b, c ```    ## Discussion Questions  1. What is the difference between computer _memory_ and the computer _disk_? 2. When using Excel spreadsheets, what causes something to be in memory? What causes something to be on the disk? 3. When writing a Python program, what causes something to be in memory? What causes something to be on the disk?    ","categories": [],
        "tags": [],
        "url": "/Fall2023/CS130/slides/2023-08-29-introduction-to-computer-organization/",
        "teaser": null
      },{
        "title": "Mips Assembly Language",
        "excerpt":"## Introduction to # MIPS ---   CS 130 // 2023-08-31    # Course Themes     ## Overarching Theme - Learning how a high-level program is actually executed on your computer's processor    ![Compiler-Assembler Diagram](/Fall2023/CS130/assets/images/COD/compiler-assembler.png)    ## Trajectory of the Course 1. **Assembly language programming** 2. Digital logic 3. Processor architecture 4. The C Programming Language    # Assembly Languages     ## Assembly Languages - Every CPU architecture implements an **instruction set** which are the operations it natively supports -   The most common CPU architectures are:     + x86 (Intel/AMD)     +   ARM (Mobile phones, tablets, Apple's M1 chip, ...)  -   Instructions are extremely simple like ``` add a, b, c ```    ## Revisiting the Exercise from last time  A complicated line of high-level code like this ```python pay = (salary + bonus) - (health_premium + taxes) ```  Gets translated by the *compiler* into assembly code like ```bash add basepay, salary, bonus add deductions, health_premium, taxes sub pay, basepay, deductions ```      ## RISC vs. CISC - CPU architectures are usually categorized as either \"RISC\" or \"CISC\" -   RISC (Reduced Instruction Set Computing)     + Simplified instructions which \"do less\"     + ...but each instruction is highly optimized    ## RISC vs. CISC - CISC (Complicated Instruction Set Computing)     + Larger instruction set each of which \"does more\"     + Optimized so that a program can be implemented with few instructions---even though those instructions may take longer to execute    # MIPS     ## MIPS Architecture - In this course, we will be learning the MIPS instruction set     + \"Microprocessor without Interlocked Pipelined Stages\" - MIPS is a RISC processor with a minimalistic number of instructions - Is very similar to ARM     ## Discussion Question    - what exactly are `salary` or `taxes`  in this example?    ```python pay = (salary + bonus) - (health_premium + taxes) ```     ## Pointers  - In assembly programs, labels like `salary` or `taxes` are *pointers*  -   **pointer**: a stand-in for a _memory address_  -   Even this is too complicated for RISC ```bash add basepay, salary, bonus ```  -   You might first have to grab the data at the address indicated by the pointer _before_ you can do any operations on it.    ## Grabbing data from memory  - When we grab data from memory, where do we put it?  -   **Registers**: a holding place for data right inside the CPU   - data has to be in a register before you can perform operations    ![Processor component diagram](/Fall2023/CS130/assets/images/COD/control.png)    ## MIPS Architecture - Has 32 registers, each of which are 32-bits -   Why not include more registers?     +   Cost; registers are more expensive than RAM     +   Performance; more registers means slower clock     +   Instruction size; more registers means each instruction needs more bits to identify registers     #### A MIPS program in MARS  ![Processor component diagram](/Fall2023/CS130/assets/images/first_program.png)     #### Things to notice in MARS  - Registers have names like `$t0`, `$s2`, etc. - You can refer to a register by its name or number.    - `$t0` is also `$8` - MARS can be wonky   - MARS didn't play nice with OneDrive for me - you may need to create a folder for your `.asm` files in your home directory - `lw` means _load word_   - a **word** is a 32 bit value  ```mips #loads a value from memory location a into register $t0 lw $t0, a   ```        #### Exploration Exercise  1. Write the above program in MARS 2. What values are stored in each of the registers initially? 3. Find and press the **Assemble** button 4. What memory addresses did your *program* get stored in? 5. What memory addresses did your *data* get stored in? 6. Find and press the **Run** button 7. What values ended up in `$t0`, `$t1`, and `$t2`? Is that what you expected?    8. Change `a`'s initial value to 9 and rerun. What is in `$t2` now? What do you think is going on here? 9. Add the following to your data section ```mips result: 0 ``` 10. Add the following to the end of your text section ```mips sw $t2, result ``` 11. Rerun. Look in memory - is there a new value there? 12. What do you think `sw` means? 13. Try the **Run one step at a time** button and step through the program slowly. Watch the values change in the registers.     ## MIPS Register Conventions             Name Reg # Usage     $zero 0 Constant 0     $v0,...2-3 Values     $a0,...4-7 Arguments     $t0,...8-15 Temporaries     $s0,...16-23 Saved (variables)     $t8,...24-25 More temporaries     $gp28 global pointer     $sp29 stack pointer     $fp30 frame pointer     $ra31 return address             Register 1 is reserved for the assembler      Registers 26-27 are reserved for the OS      Only 8 $s registers (0..7)      Only 10 $t registers (0..9)        ## Exercise  - Write a MIPS program that does the equivalent of this high-level line of code ```python pay = (salary + bonus) - (health_premium + taxes) ```    ## Immediate values  - A literal value like 3 in the example below is called an **immediate value** - `li` means _load immedate_  ```mips .data  x: 5  .text  lw $t0, x li $t1, 3 #load 3 directly into $t1 add $t0, $t1, $t0 ```    ## I-type instructions  - There's also a variation of `add` where the second operand is replaced with an immediate value - `addi` means *add immediate*    - it's an **I-type instruction**  ```mips .data  x: 5  .text  lw $t0, x addi $t0, $t0, 3 ```     ## R-Type instructions  - The add instruction that uses only registers is an **R-type instruction**  ```mips add $t0, $t1, $t0 ```     ## System Calls  - We can make **system calls** to have the system perform things like input and output - Put the system call code in `$v0` - Put argument in `$a0` (and maybe `$a1` if needed)    #### Output Exercise  - Run this in MARS and discuss what happens with your neighbors - What do you think `.asciiz` does?  ```mips .data  message: .asciiz \"Hello!\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, message #the argument for the syscall syscall ```    #### Input Exercise  - Run this in MARS and discuss what happens with your neighbors - Which register does the user's input go into?  ```mips .data  prompt: .asciiz \"Enter an integer:\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, prompt #the argument for the syscall syscall  li $v0, 5 #5 is the code for reading an integer syscall ```   #### Interactive Program Exercise  - [Assignment 1](../../assignments/assignment-1/): Write a program that interacts with the user and performs some kind of computation based on their input - Find other syscall codes on page B-44 of the textbook  ","categories": [],
        "tags": [],
        "url": "/Fall2023/CS130/slides/2023-08-31-mips-assembly-language/",
        "teaser": null
      },{
        "title": "Registers Instructions System Calls",
        "excerpt":"# Registers, Instructions, and System Calls  ---    CS 130 // 2023-09-05    # Review      ## Recap of last week  - MIPS: RISC architecture   + 32, 32-bit registers - We wrote some a simple MIPS program in Mars   + watched data change in registers and memory - Data and instructions get turned into binary and placed in memory     - Covered `add`, `lw`, `sw`  ```mips .data  a: 9 b: 3 result: 0   .text  lw $t0, a lw $t1, b add $t2, $t0, $t1 sw $t2, result ```    # More on Registers and Instructions      ## MIPS Register Conventions             Name Reg # Usage     $zero 0 Constant 0     $v0,...2-3 Values     $a0,...4-7 Arguments     $t0,...8-15 Temporaries     $s0,...16-23 Saved (variables)     $t8,...24-25 More temporaries     $gp28 global pointer     $sp29 stack pointer     $fp30 frame pointer     $ra31 return address             Register 1 is reserved for the assembler      Registers 26-27 are reserved for the OS      Only 8 $s registers (0..7)      Only 10 $t registers (0..9)        ## Exercise  - Write a MIPS program that does the equivalent of this high-level line of code ```python pay = (salary + bonus) - (health_premium + taxes) ```    ## Immediate values  - A literal value like 3 in the example below is called an **immediate value** - `li` means _load immedate_  ```mips .data  x: 5  .text  lw $t0, x li $t1, 3 #load 3 directly into $t1 add $t0, $t1, $t0 ```    ## I-type instructions  - There's also a variation of `add` where the second operand is replaced with an immediate value - `addi` means *add immediate*    - it's an **I-type instruction**  ```mips .data  x: 5  .text  lw $t0, x addi $t0, $t0, 3 ```     ## R-Type instructions  - The add instruction that uses only registers is an **R-type instruction**  ```mips add $t0, $t1, $t0 ```     ## System Calls  - We can make **system calls** to have the system perform things like input and output - Put the system call code in `$v0` - Put argument in `$a0` (and maybe `$a1` if needed)    #### Output Exercise  - Run this in MARS and discuss what happens with your neighbors - What do you think `.asciiz` does?  ```mips .data  message: .asciiz \"Hello!\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, message #the argument for the syscall syscall ```    #### Input Exercise  - Run this in MARS and discuss what happens with your neighbors - Which register does the user's input go into?  ```mips .data  prompt: .asciiz \"Enter an integer:\"  .text  li $v0, 4 #4 is the code for printing a string la $a0, prompt #the argument for the syscall syscall  li $v0, 5 #5 is the code for reading an integer syscall ```   #### Assignment: Interactive Program  You now know enough to do the first assignment  - [Assignment 1](../../assignments/assignment-1/): Write a program that interacts with the user and performs some kind of computation based on their input - Find other syscall codes on page B-44 of the textbook       # Binary Numbers     ## Let's talk about how counting works  ![Odometer rollover](/Fall2023/CS130/assets/images/Odometer_rollover.jpg)     How do you count if you only have two digits? ","categories": [],
        "tags": [],
        "url": "/Fall2023/CS130/slides/2023-09-05-registers-instructions-system-calls/",
        "teaser": null
      },{
        "title": "Numbers And Machine Code",
        "excerpt":"# Numbers and Machine Code  ---    CS 130 // 2023-09-07         ## Student Research Groups  Friday, September 8th at 1:00pm in C-S 301  No experience required  Come to learn more about possible research groups in mathematics, computer science, math education, data science, cyber security, and more!    # CS Jokes  ![Only 10 types of people shirt](/Fall2023/CS130/assets/images/shirt10typesOfPeople.jpg)   Source: https://www.amazon.com/Types-People-understand-Binary-T-Shirt/dp/B07PSPLSC9    # Binary Numbers     ## Let's talk about how counting works  ![Odometer rollover](/Fall2023/CS130/assets/images/Odometer_rollover.jpg)     How do you count if you only have two digits?     ## Counting in Binary - CPUs compute in **binary** using the contrast of low/high voltages to mean 0 and 1 - the two _binary digits_ or **bits** - So how do we encode **numbers** in binary?     ## Base 10 (AKA Decimal)  - When we write 437 we usually mean base 10 - the number system with 10 digits  - Can also write it as $437_\\text{ten}$   - $437_\\text{ten}$ means   `$$(4\\cdot 100)+(3\\cdot 10)+(7\\cdot 1)$$`  or  `$$(4\\cdot 10^2)+(3\\cdot 10^1)+(7\\cdot 10^0)$$`    ## Base 2 (AKA Binary)   $1101_\\text{two}$ means   `$$(1\\cdot 8)+(1\\cdot 4)+(0\\cdot 2)+(1\\cdot 1)$$`  or  `$$(1\\cdot 2^3)+(1\\cdot 2^2)+(0\\cdot 2^1)+(1\\cdot 2^0)$$`     ### Demo: Let's convert numbers to different bases   - $110110101_\\text{two}$  - $437_\\text{ten}$    ### Exercise: Practice with Binary - Convert the following number into decimal:     + $1011010_\\text{two}$ - Convert the following decimal number into binary:     + $277_\\text{ten}$      ### Base 16 (AKA Hexadecimal)  - Hexadecimal is base 16 - digits 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F - 5C means  `$$(5\\cdot 16)+(12\\cdot 1)$$`  - Easy to convert back and forth from binary    ### Counting in Binary/Hexadecimal              Decimal BinaryHex      0 0 0      1 1 1       2 102      3 11 3      4 1004      5 1015      6 1106      7 1117      8 1000 8                  Decimal BinaryHex      9 1001 9      10 1010A      11 1011 B      12 1100C      13 1101D      14 1110E      15 1111F      16 1000010      17 1000111            ### Exercise: Exploring in Mars    - Open up Mars and create a `.asm` file  - Put the number 302 in your data section - How does Mars display that in Hex? - What is the Binary equivalent?    ### Exercise: Convert back and forth    - Convert the following binary number into hex   - $\\text{1111 1010 0001 1011 0100 1110 0010 0011}_\\text{two}$ - Convert the following hexadecimal number into binary   - $\\text{00FF33AA}_\\text{hex}$    # Negative Numbers     ## Negative Numbers in Binary - We usually represent negative numbers by including a \"minus sign\" at the beginning of a number: $-437$ -   However, when representing numbers for logic circuits, we can **ONLY** use $0$s and $1$s. -   So what do we do?    ## Idea 1: Using a Sign Bit - We could treat the first bit of a number as the \"sign\" bit where $0$ means positive and $1$ means negative     + $10010$ is the same as $-0010$     + $01010$ is the same as $+1010$ -   Drawbacks     + Multiple representations for $0$     +   Addition/subtraction is not as convenient     +   Confusion over where the sign bit should be      ## Idea 2: Wrap Around  ![Odometer rollover](/Fall2023/CS130/assets/images/Odometer_rollover.jpg)   - Numbers \"wrap around\" from the **largest** number $999999$ to the **smallest** $000000$ -   We can do the same thing in binary!     +   If you add one to the largest number, it \"wraps around\" to the smallest negative number          # Two's Complement     ## Two's Complement - Most computers use **two's complement** to encode signed integer values - What is it exactly?     +   Non-negative numbers are represented as usual$0000$, $0011$, $0110$     +   To negate a number, you do the following:         1. Flip all the bits: $0\\rightarrow 1$ and $1\\rightarrow 0$         2. Add 1 to the result     +   $0000$, $1101$, $1010$        ## Two's Complement - Most processors are 32-bit or 64-bit, which means values sent to the processor are encoded in 32 or 64 bits, respectively -   In this class, we are using the MIPS 32-bit architecture -   Another way to think about two's complement is:      $1000\\\\;1001\\\\;1100\\\\;1010\\\\;0110\\\\;0110\\\\;0001\\\\;1110$      $(x_{31}\\cdot -2^{31}) + (x_{30}\\cdot 2^{30}) + \\cdots + (x_{1}\\cdot 2^{1}) + (x_{0}\\cdot 2^{0})$    ## Exercise ### Two's Complement Practice - Convert each of the following numbers to decimal:  ---  - $1111\\\\;1111\\\\;1111\\\\;1111\\\\;1111\\\\;1111\\\\;1111\\\\;1111$ - $1111\\\\;1111\\\\;1111\\\\;1111\\\\;1111\\\\;1111\\\\;1110\\\\;0101$ - $0000\\\\;0000\\\\;0000\\\\;0000\\\\;0000\\\\;0000\\\\;0000\\\\;0101$     ## Assignment is up  - [Assignment 2](../../assignments/assignment-2/)   - pen-and-paper    - convert some numbers between decimal, hexadecimal, and binary    # MIPS Machine Code     ## MIPS Machine Code - Each MIPS instruction is encoded in 32-bits     +   `add` `$t0`, `$s1`, `$s2`     +   000000 10001 10010 01000 00000 100000  ---  ![R-Type Instruction](/Fall2023/CS130/assets/images/COD/r-type-instruction.png)     ## R-Type Instructions ![R-Type Instruction](/Fall2023/CS130/assets/images/COD/r-type-instruction.png)  ---  1.   `op` (6 bits): Opcode 2.   `rs` (5 bits): First operand register 3.   `rt` (5 bits): Second operand register 4.   `rd` (5 bits): Destination register (result) 5.   `shamt` (5 bits): Shift amount 6.   `funct` (6 bits): Function code    ## I-Type Instructions ![I-Type Instruction](/Fall2023/CS130/assets/images/COD/i-type-instruction.png)  ---  1. `op` (6 bits): Opcode 2. `rs` (5 bits): First operand register 3. `rt` (5 bits): Second operand register 4.   `data` (16 bits): Constant or address    ## R-Type VS I-Type - Which type are each of the following instructions?     +   add     +   addi     +   sub     +   lw     +   sw    ## R-Type VS I-Type - Why do we need the I-type? Why not just implement `addi`, `lw`, and `sw` using the R-type format?     +   Allows us to specify larger addresses and constants     +   $2^5 = 32$ and $2^{16} = 65536$   ","categories": [],
        "tags": [],
        "url": "/Fall2023/CS130/slides/2023-09-07-numbers-and-machine-code/",
        "teaser": null
      },{
        "title": "Machine Code Logic Operations And Conditionals",
        "excerpt":"# Machine Code and Logic Operations  ---  CS 130 // 2023-09-12    ## Office Hours Change  Office hours changing to   Mondays 10:00am-1:00pm (new time)  Tuesdays 10:00am-noon (same as before)  Wednesdays: None   **Except:** I will not have office hours September 18th - I will try to add some additional times next week and post it to StarFish    # MIPS Machine Code     ## MIPS Machine Code - Each MIPS instruction is encoded in 32-bits     +   `add` `$t0`, `$s1`, `$s2`     +   000000 10001 10010 01000 00000 100000  ---  ![R-Type Instruction](/Fall2023/CS130/assets/images/COD/r-type-instruction.png)     ## R-Type Instructions ![R-Type Instruction](/Fall2023/CS130/assets/images/COD/r-type-instruction.png)  ---  1.   `op` (6 bits): Opcode 2.   `rs` (5 bits): First operand register 3.   `rt` (5 bits): Second operand register 4.   `rd` (5 bits): Destination register (result) 5.   `shamt` (5 bits): Shift amount 6.   `funct` (6 bits): Function code    ## I-Type Instructions ![I-Type Instruction](/Fall2023/CS130/assets/images/COD/i-type-instruction.png)  ---  1. `op` (6 bits): Opcode 2. `rs` (5 bits): First operand register 3. `rt` (5 bits): Second operand register 4.   `data` (16 bits): Constant or address    ## Exercise  - Use Mars to figure out how each of the following is represented in bits (convert from hex!). ```mips add $t2, $t1, $t0 sub $t2, $t1, $t0 addi $t0, $t0, 3 ``` - What are the opcodes for `add`, `sub`, and `addi`?     ## R-Type VS I-Type - Why do we need the I-type? Why not just implement `addi`, `lw`, and `sw` using the R-type format?     +   Allows us to specify larger addresses and constants     +   $2^5 = 32$ and $2^{16} = 65536$     # Logical Operations     ## Boolean values - Suppose I create a `bool` variable in Python:     ```py     b = True     ``` -   How many bits of memory were just allocated?     +   An entire word!     +   `b` is a **memory address** that \"points to\" `True`    ## Logical operator investigation     Before executing: guess what you think `$t0`-`$t5` will be   Execute it: were you right?  Is this how `and` and `or` behave in Python?    ```mips    .text     li $s0, 0    li $s1, 1    li $s2, 2    li $s3, 3        and $t0, $s0, $s1    or $t1, $s0, $s1    andi $t2, $s1, 1    ori $t3, $s1, 0        or $t4, $s1, $s2    and $t5, $s2, $s3 ```       ## Set on Less Than investigation     Before executing: guess what you think `$t0`-`$t5` will be  Execute it: were you right?  What do `sle` and `sgt` mean? What do they get translated into by the assemler?    ```mips .text   li $s1, 2 li $s2, 2 li $s3, 3  #slt: \"set on less than\" slt $t0, $s2, $s3 slt $t1, $s1, $s2 slt $t2, $s3, $s2 slti $t3, $s3, 10  #psuedoinstructions sle $t4, $s1, $s3 sle $t5, $s1, $s2 sgt $t6, $s3, $s2 ```       ## Shifting investigation     Execute it: what do `sll` and `srl` do?  What happens if you shift an odd number?  Are these R-Type or I-Type instructions?    ```mips .text   li $s0, 16  #shift left logical sll $t0, $s0, 1 sll $t1, $s0, 2  #shift right logical srl $t2, $s0, 2 ```        # Conditionals     ## Branching - **Branching** allows MIPS programs to skip around to different parts of the program - Useful for     - conditional statements (if, if-else, etc.)     - loops    - continue executing at the line labeled `my_label` ```mips b my_label #... my_label: ``` -   continue executing at the line labeled `my_label` if `$s0` and `$s1` are equal ```mips beq $s0, $s1, my_label ``` -   continue executing at the line labeled `my_label` if `$s0` and `$s1` are _not_ equal ```mips bne $s0, $s1, my_label ```     ## Compiling an `if` Statement         ```python     if i == j:         k = 1      print(\"The value of k is\",k) ```     ```mips .data  i: 5 j: 8 k: 0 message: .asciiz \"The value of k is \"  .text  \tlw $s0, i \tlw $s1, j \t \tbne $s0, $s1, disp_msg \tli $s2, 1 \tsw $s2, k  disp_msg: \tli $v0, 4 #4 is the code for printing a string \tla $a0, message #the argument for the syscall \tsyscall  \t \tli $v0, 1 #1 is the code for printing an int \tlw $a0, k #the argument for the syscall \tsyscall  ```          ## Exercise  - Run the above program in Mars, observe the output - Change it so `i` and `j` are equal, run again - Translate the following Python program into MIPS ```python     if i == j:         k = 1     else:         k = 2      print(\"The value of k is\",k) ```   ","categories": [],
        "tags": [],
        "url": "/Fall2023/CS130/slides/2023-09-12-machine-code-logic-operations-and-conditionals/",
        "teaser": null
      }]
